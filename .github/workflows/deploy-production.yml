name: Deploy to Production

on:
  release:
    types:
      - published

jobs:
  deploy:
    runs-on:
      - self-hosted
      - production
    env:
      ENVIRONMENT: production
      DOMAIN: ${{ secrets.DOMAIN_PRODUCTION }}
      STACK_NAME: ${{ secrets.STACK_NAME_PRODUCTION }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      FIRST_SUPERUSER: ${{ secrets.FIRST_SUPERUSER }}
      FIRST_SUPERUSER_PASSWORD: ${{ secrets.FIRST_SUPERUSER_PASSWORD }}
      SMTP_HOST: ${{ secrets.SMTP_HOST }}
      SMTP_USER: ${{ secrets.SMTP_USER }}
      SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
      EMAILS_FROM_EMAIL: ${{ secrets.EMAILS_FROM_EMAIL }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Create .env file
        run: |
          echo "ENVIRONMENT=${{ secrets.ENVIRONMENT }}" >> .env
          echo "PROJECT_NAME=${{ secrets.PROJECT_NAME }}" >> .env
          echo "VITE_SERVER_URL=${{ secrets.VITE_SERVER_URL }}" >> .env
          echo "BACKEND_CORS_ORIGINS=${{ secrets.BACKEND_CORS_ORIGINS }}" >> .env
          echo "DOMAIN_PORT=${{ secrets.DOMAIN_PORT }}" >> .env
          echo "USE_HASH_ROUTER=${{ secrets.USE_HASH_ROUTER }}" >> .env
          echo "ACCESS_TOKEN_EXPIRE_MINUTES=${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}" >> .env
          echo "ALGORITHM=${{ secrets.ALGORITHM }}" >> .env
          echo "FERNET_SECRET=${{ secrets.FERNET_SECRET }}" >> .env
          echo "SMTP_PORT=${{ secrets.SMTP_PORT }}" >> .env
          echo "SMTP_USERNAME=${{ secrets.SMTP_USERNAME }}" >> .env
          echo "EMAILS_FROM_NAME=${{ secrets.EMAILS_FROM_NAME }}" >> .env
          echo "POSTGRES_SERVER=${{ secrets.POSTGRES_SERVER }}" >> .env
          echo "POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}" >> .env
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
      - name: Create .env file for the docker image
        run: |
          # invalid reference format: repository name must be lowercase
          REPO_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          SERVICES=("backend" "frontend")

          for SERVICE in "${SERVICES[@]}"; do
            VAR_NAME="DOCKER_IMAGE_$(echo "$SERVICE" | tr '[:lower:]' '[:upper:]')"
            IMAGE_NAME="ghcr.io/${REPO_OWNER}/${SERVICE}:latest"
            echo "${VAR_NAME}=${IMAGE_NAME}" >> .env
          done
      - name: Log in to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Pull and Deploy
        run: |
          # invalid reference format: repository name must be lowercase
          REPO_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          # Define services
          SERVICES=("backend" "frontend")

          for SERVICE in "${SERVICES[@]}"; do
            IMAGE_NAME="ghcr.io/${REPO_OWNER}/${SERVICE}:latest"
            docker pull $IMAGE_NAME
          done

          docker compose up -d
