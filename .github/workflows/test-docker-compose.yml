name: Test Docker Compose

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - opened
      - synchronize

jobs:

  test-docker-compose:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create .env file
        run: |
          echo "ENVIRONMENT=${{ secrets.ENVIRONMENT }}" >> .env
          echo "PROJECT_NAME=${{ secrets.PROJECT_NAME }}" >> .env
          echo "STACK_NAME=${{ secrets.STACK_NAME }}" >> .env
          echo "DOMAIN=${{ secrets.DOMAIN }}" >> .env
          echo "VITE_SERVER_URL=${{ secrets.VITE_SERVER_URL }}" >> .env
          echo "BACKEND_CORS_ORIGINS=${{ secrets.BACKEND_CORS_ORIGINS }}" >> .env
          echo "DOMAIN_PORT=${{ secrets.DOMAIN_PORT }}" >> .env
          echo "FIRST_SUPERUSER=${{ secrets.FIRST_SUPERUSER }}" >> .env
          echo "FIRST_SUPERUSER_PASSWORD=${{ secrets.FIRST_SUPERUSER_PASSWORD }}" >> .env
          echo "USE_HASH_ROUTER=${{ secrets.USE_HASH_ROUTER }}" >> .env
          echo "ACCESS_TOKEN_EXPIRE_MINUTES=${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}" >> .env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "ALGORITHM=${{ secrets.ALGORITHM }}" >> .env
          echo "FERNET_SECRET=${{ secrets.FERNET_SECRET }}" >> .env
          echo "SMTP_HOST=${{ secrets.SMTP_HOST }}" >> .env
          echo "SMTP_PORT=${{ secrets.SMTP_PORT }}" >> .env
          echo "SMTP_USERNAME=${{ secrets.SMTP_USERNAME }}" >> .env
          echo "SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}" >> .env
          echo "EMAILS_FROM_EMAIL=${{ secrets.EMAILS_FROM_EMAIL }}" >> .env
          echo "EMAILS_FROM_NAME=${{ secrets.EMAILS_FROM_NAME }}" >> .env
          echo "POSTGRES_SERVER=${{ secrets.POSTGRES_SERVER }}" >> .env
          echo "POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}" >> .env
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env

      - run: docker compose build db adminer backend frontend proxy
      - run: docker compose down -v --remove-orphans
      - run: docker compose up -d --wait backend frontend adminer
      - name: Test backend is up
        run: curl http://localhost:8000/api/v1/utils/health-check
      - name: Test frontend is up
        run: curl http://localhost:5173
      - run: docker compose down -v --remove-orphans
